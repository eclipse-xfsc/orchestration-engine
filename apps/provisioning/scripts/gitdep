#!/bin/bash
echo 123
SOURCE_PVC=$1
NEW_HOSTNAME=$2
BASE_HOSTNAME=$2
export KUBECONFIG=$3
/data/depgenerator/newdepgeneratorremover $2 $3
NEW_HOSTNAME="$(echo "${NEW_HOSTNAME}" | tr '[:upper:]' '[:lower:]' | tr '.' '-')"
PVC_TEMPLATE="apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{NEW_HOSTNAME}}
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: do-block-storage
"


DEPLOYMENT_TEMPLATE="apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{NEW_HOSTNAME}}
  labels:
    app: {{NEW_HOSTNAME}}
    app.kubernetes.io/instance: {{NEW_HOSTNAME}}
    app.kubernetes.io/name: {{NEW_HOSTNAME}}
    app.kubernetes.io/version: 3.0.2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{NEW_HOSTNAME}}
      app.kubernetes.io/instance: {{NEW_HOSTNAME}}
      app.kubernetes.io/name: {{NEW_HOSTNAME}}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: {{NEW_HOSTNAME}}
        app.kubernetes.io/instance: {{NEW_HOSTNAME}}
        app.kubernetes.io/name: {{NEW_HOSTNAME}}
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      initContainers:
      - name: data-init
        image: busybox
        command: ['sh', '-c', 'cp -r /data-original/* /data && cp -r /red-original/* /usr/src/node-red/node_modules/@node-red/editor-client/public/red && cp -r /icons-original/* /usr/src/node-red/node_modules/@node-red/nodes/icons']
        volumeMounts:
        - name: data
          mountPath: /data
        - name: red-original
          mountPath: /red-original
        - name: icons-original
          mountPath: /icons-original
      - command:
        - sh
        - -c
        - chown -R 1000:1000 /srv
        image: busybox
        imagePullPolicy: Always
        name: volume-permissions
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /srv
          name: data
      containers:
      - image: {{SOURCE_PVC}}
        imagePullPolicy: IfNotPresent
        name: hackathon3-leanea-com
        ports:
        - containerPort: 1880
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      - args:
        - --baseurl
        - /fscloud
        image: filebrowser/filebrowser
        imagePullPolicy: Always
        name: filebrowser
        ports:
        - containerPort: 80
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /srv
          name: data
          subPath: nodedata
      dnsPolicy: ClusterFirst
      initContainers:
      - command:
        - sh
        - -c
        - chown -R 1000:1000 /srv
        image: busybox
        imagePullPolicy: Always
        name: volume-permissions
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /srv
          name: data
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1000
      terminationGracePeriodSeconds: 30
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: {{NEW_HOSTNAME}}
"

create_resource() {
    local template="$1"
    local source_pvc=$(echo "$2" | sed 's/\//\\\//g')  # Escaping slashes
    local new_hostname=$(echo "$3" | sed 's/\./\\./g') # Escaping dots

    echo "${template}" \
        | sed "s/{{SOURCE_PVC}}/${source_pvc}/g" \
        | sed "s/{{NEW_HOSTNAME}}/${new_hostname}/g"
}


create_resource "${PVC_TEMPLATE}" "${SOURCE_PVC}" "${NEW_HOSTNAME}" > "${NEW_HOSTNAME}-pvc.yaml"
create_resource "${DEPLOYMENT_TEMPLATE}" "${SOURCE_PVC}" "${NEW_HOSTNAME}" > "${NEW_HOSTNAME}-deployment.yaml"

echo "Generated files:"
echo "${NEW_HOSTNAME}-pvc.yaml"
echo "${NEW_HOSTNAME}-deployment.yaml"



echo "Applying resources to the cluster...PERCENTAGE20"
kubectl apply -f "${NEW_HOSTNAME}-pvc.yaml"


echo "Applying deployment to the cluster...PERCENTAGE60"
kubectl apply -f "${NEW_HOSTNAME}-deployment.yaml"

echo "Resources applied successfully.PERCENTAGE80"

/data/depgenerator/newkubescript $BASE_HOSTNAME $3

