[
    {
        "id": "17fd25c6e3106653",
        "type": "subflow",
        "name": "Provisioning Script Framework",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 70,
                "wires": [
                    {
                        "id": "f7c98dd8fda951dd"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "88499b36285a4c4a",
        "type": "template",
        "z": "17fd25c6e3106653",
        "name": "Gendep",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "#!/bin/bash\necho 123\nSOURCE_PVC=$1\nNEW_HOSTNAME=$2\nBASE_HOSTNAME=$2\nexport KUBECONFIG=$3\n/data/depgenerator/newdepgeneratorremover $2 $3\nNEW_HOSTNAME=\"$(echo \"${NEW_HOSTNAME}\" | tr '[:upper:]' '[:lower:]' | tr '.' '-')\"\nPVC_TEMPLATE=\"apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: {{NEW_HOSTNAME}}\n  namespace: default\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 2Gi\n  storageClassName: do-block-storage\n\"\n\nRSYNC_POD_TEMPLATE=\"apiVersion: v1\nkind: Pod\nmetadata:\n  name: rsync-data-pod\nspec:\n  restartPolicy: OnFailure\n  containers:\n  - name: rsync-data\n    image: alpine:latest\n    command: [\\\"sh\\\", \\\"-c\\\", \\\"apk add --no-cache rsync && rsync -av /source/ /destination/\\\"]\n    volumeMounts:\n    - name: source-pvc\n      mountPath: /source\n    - name: destination-pvc\n      mountPath: /destination\n  volumes:\n  - name: source-pvc\n    persistentVolumeClaim:\n      claimName: {{SOURCE_PVC}}\n  - name: destination-pvc\n    persistentVolumeClaim:\n      claimName: {{NEW_HOSTNAME}}\n\"\n\nDEPLOYMENT_TEMPLATE=\"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{NEW_HOSTNAME}}\n  labels:\n    app: {{NEW_HOSTNAME}}\n    app.kubernetes.io/instance: {{NEW_HOSTNAME}}\n    app.kubernetes.io/name: {{NEW_HOSTNAME}}\n    app.kubernetes.io/version: 3.0.2\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: {{NEW_HOSTNAME}}\n      app.kubernetes.io/instance: {{NEW_HOSTNAME}}\n      app.kubernetes.io/name: {{NEW_HOSTNAME}}\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      labels:\n        app: {{NEW_HOSTNAME}}\n        app.kubernetes.io/instance: {{NEW_HOSTNAME}}\n        app.kubernetes.io/name: {{NEW_HOSTNAME}}\n    spec:\n      securityContext:\n        fsGroup: 1000\n        runAsUser: 1000\n      containers:\n      - image: docker.io/leanea/cr:1.0.1\n        imagePullPolicy: IfNotPresent\n        name: hackathon3-leanea-com\n        ports:\n        - containerPort: 1880\n          protocol: TCP\n        resources: {}\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n        volumeMounts:\n        - mountPath: /usr/src/node-red/node_modules/@node-red/editor-client/public/red\n          name: data\n          subPath: red\n        - mountPath: /usr/src/node-red/node_modules/@node-red/nodes/icons\n          name: data\n          subPath: icons\n        - mountPath: /data\n          name: data\n          subPath: nodedata\n        - mountPath: /all\n          name: data\n      - args:\n        - --baseurl\n        - /fscloud\n        image: filebrowser/filebrowser\n        imagePullPolicy: Always\n        name: filebrowser\n        ports:\n        - containerPort: 80\n          protocol: TCP\n        resources: {}\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n        volumeMounts:\n        - mountPath: /srv\n          name: data\n          subPath: nodedata\n      dnsPolicy: ClusterFirst\n      initContainers:\n      - command:\n        - sh\n        - -c\n        - chown -R 1000:1000 /srv\n        image: busybox\n        imagePullPolicy: Always\n        name: volume-permissions\n        resources: {}\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n        volumeMounts:\n        - mountPath: /srv\n          name: data\n      restartPolicy: Always\n      schedulerName: default-scheduler\n      securityContext:\n        fsGroup: 1000\n      terminationGracePeriodSeconds: 30\n      volumes:\n      - name: data\n        persistentVolumeClaim:\n          claimName: {{NEW_HOSTNAME}}\n\"\n\ncreate_resource() {\n    local template=\"$1\"\n    local source_pvc=\"$2\"\n    local new_hostname=\"$3\"\n\n    echo \"${template}\" \\\n        | sed \"s/{{SOURCE_PVC}}/${source_pvc}/g\" \\\n        | sed \"s/{{NEW_HOSTNAME}}/${new_hostname}/g\"\n}\n\ncreate_resource \"${PVC_TEMPLATE}\" \"${SOURCE_PVC}\" \"${NEW_HOSTNAME}\" > \"${NEW_HOSTNAME}-pvc.yaml\"\ncreate_resource \"${RSYNC_POD_TEMPLATE}\" \"${SOURCE_PVC}\" \"${NEW_HOSTNAME}\" > \"${NEW_HOSTNAME}-rsync-pod.yaml\"\ncreate_resource \"${DEPLOYMENT_TEMPLATE}\" \"${SOURCE_PVC}\" \"${NEW_HOSTNAME}\" > \"${NEW_HOSTNAME}-deployment.yaml\"\n\necho \"Generated files:\"\necho \"${NEW_HOSTNAME}-pvc.yaml\"\necho \"${NEW_HOSTNAME}-rsync-pod.yaml\"\necho \"${NEW_HOSTNAME}-deployment.yaml\"\n\n# echo \"Applying resources to the cluster...\"\n# kubectl apply -f \"${NEW_HOSTNAME}-pvc.yaml\"\n# kubectl apply -f \"${NEW_HOSTNAME}-rsync-pod.yaml\"\n\n# echo \"Waiting for the rsync-data-pod to complete...\"\n# kubectl wait --for=condition=complete --timeout=30m pod/rsync-data-pod\n\n# echo \"Applying deployment to the cluster...\"\n# kubectl apply -f \"${NEW_HOSTNAME}-deployment.yaml\"\n\n# echo \"Resources applied successfully.\"\n\n#DEPLOYMENT_NAME=$(kubectl get pods --all-namespaces -o jsonpath='{.items[?(@.spec.volumes[0].persistentVolumeClaim.claimName==\"'\"${SOURCE_PVC}\"'\")].metadata.labels.app}')\n\n#if [ -z \"${DEPLOYMENT_NAME}\" ]; then\n #   echo \"No deployment found for source PVC ${SOURCE_PVC}. Exiting.\"\n  #  exit 1\n#fi\nDEPLOYMENT_NAME=$SOURCE_PVC\necho \"Scaling down deployment ${DEPLOYMENT_NAME}...\"\nkubectl scale deployment \"${DEPLOYMENT_NAME}\" --replicas=0\n\necho \"Applying resources to the cluster...PERCENTAGE20\"\nkubectl apply -f \"${NEW_HOSTNAME}-pvc.yaml\"\nkubectl apply -f \"${NEW_HOSTNAME}-rsync-pod.yaml\"\n\necho \"Waiting for the rsync-data-pod to complete...PERCENTAGE30\"\nwhile [[ $(kubectl get pod rsync-data-pod -o 'jsonpath={.status.phase}') != \"Succeeded\" ]]; do\n  sleep 5\ndone\n\necho \"Scaling up deployment ${DEPLOYMENT_NAME}...PERCENTAGE50\"\nkubectl scale deployment \"${DEPLOYMENT_NAME}\" --replicas=1\n\necho \"Applying deployment to the cluster...PERCENTAGE60\"\nkubectl apply -f \"${NEW_HOSTNAME}-deployment.yaml\"\n\necho \"Resources applied successfully.PERCENTAGE80\"\necho \"Removing rsync-data-pod...PERCENTAGE90\"\nkubectl delete pod rsync-data-pod\n/data/depgenerator/newkubescript $BASE_HOSTNAME $3\n",
        "output": "str",
        "x": 1555,
        "y": 280,
        "wires": [
            [
                "bf3e3cfbd2f0157f"
            ]
        ]
    },
    {
        "id": "63d4fa05c4678e19",
        "type": "template",
        "z": "17fd25c6e3106653",
        "name": "gitdep",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "#!/bin/bash\necho 123\nSOURCE_PVC=$1\nNEW_HOSTNAME=$2\nBASE_HOSTNAME=$2\nexport KUBECONFIG=$3\n/data/depgenerator/newdepgeneratorremover $2 $3\nNEW_HOSTNAME=\"$(echo \"${NEW_HOSTNAME}\" | tr '[:upper:]' '[:lower:]' | tr '.' '-')\"\nPVC_TEMPLATE=\"apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: {{NEW_HOSTNAME}}\n  namespace: default\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 2Gi\n  storageClassName: do-block-storage\n\"\n\n\nDEPLOYMENT_TEMPLATE=\"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{NEW_HOSTNAME}}\n  labels:\n    app: {{NEW_HOSTNAME}}\n    app.kubernetes.io/instance: {{NEW_HOSTNAME}}\n    app.kubernetes.io/name: {{NEW_HOSTNAME}}\n    app.kubernetes.io/version: 3.0.2\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: {{NEW_HOSTNAME}}\n      app.kubernetes.io/instance: {{NEW_HOSTNAME}}\n      app.kubernetes.io/name: {{NEW_HOSTNAME}}\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      labels:\n        app: {{NEW_HOSTNAME}}\n        app.kubernetes.io/instance: {{NEW_HOSTNAME}}\n        app.kubernetes.io/name: {{NEW_HOSTNAME}}\n    spec:\n      securityContext:\n        fsGroup: 1000\n        runAsUser: 1000\n      initContainers:\n      - name: data-init\n        image: busybox\n        command: ['sh', '-c', 'cp -r /data-original/* /data && cp -r /red-original/* /usr/src/node-red/node_modules/@node-red/editor-client/public/red && cp -r /icons-original/* /usr/src/node-red/node_modules/@node-red/nodes/icons']\n        volumeMounts:\n        - name: data\n          mountPath: /data\n        - name: red-original\n          mountPath: /red-original\n        - name: icons-original\n          mountPath: /icons-original\n      - command:\n        - sh\n        - -c\n        - chown -R 1000:1000 /srv\n        image: busybox\n        imagePullPolicy: Always\n        name: volume-permissions\n        resources: {}\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n        volumeMounts:\n        - mountPath: /srv\n          name: data\n      containers:\n      - image: {{SOURCE_PVC}}\n        imagePullPolicy: IfNotPresent\n        name: hackathon3-leanea-com\n        ports:\n        - containerPort: 1880\n          protocol: TCP\n        resources: {}\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n      - args:\n        - --baseurl\n        - /fscloud\n        image: filebrowser/filebrowser\n        imagePullPolicy: Always\n        name: filebrowser\n        ports:\n        - containerPort: 80\n          protocol: TCP\n        resources: {}\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n        volumeMounts:\n        - mountPath: /srv\n          name: data\n          subPath: nodedata\n      dnsPolicy: ClusterFirst\n      initContainers:\n      - command:\n        - sh\n        - -c\n        - chown -R 1000:1000 /srv\n        image: busybox\n        imagePullPolicy: Always\n        name: volume-permissions\n        resources: {}\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n        volumeMounts:\n        - mountPath: /srv\n          name: data\n      restartPolicy: Always\n      schedulerName: default-scheduler\n      securityContext:\n        fsGroup: 1000\n      terminationGracePeriodSeconds: 30\n      volumes:\n      - name: data\n        persistentVolumeClaim:\n          claimName: {{NEW_HOSTNAME}}\n\"\n\ncreate_resource() {\n    local template=\"$1\"\n    local source_pvc=$(echo \"$2\" | sed 's/\\//\\\\\\//g')  # Escaping slashes\n    local new_hostname=$(echo \"$3\" | sed 's/\\./\\\\./g') # Escaping dots\n\n    echo \"${template}\" \\\n        | sed \"s/{{SOURCE_PVC}}/${source_pvc}/g\" \\\n        | sed \"s/{{NEW_HOSTNAME}}/${new_hostname}/g\"\n}\n\n\ncreate_resource \"${PVC_TEMPLATE}\" \"${SOURCE_PVC}\" \"${NEW_HOSTNAME}\" > \"${NEW_HOSTNAME}-pvc.yaml\"\ncreate_resource \"${DEPLOYMENT_TEMPLATE}\" \"${SOURCE_PVC}\" \"${NEW_HOSTNAME}\" > \"${NEW_HOSTNAME}-deployment.yaml\"\n\necho \"Generated files:\"\necho \"${NEW_HOSTNAME}-pvc.yaml\"\necho \"${NEW_HOSTNAME}-deployment.yaml\"\n\n\n\necho \"Applying resources to the cluster...PERCENTAGE20\"\nkubectl apply -f \"${NEW_HOSTNAME}-pvc.yaml\"\n\n\necho \"Applying deployment to the cluster...PERCENTAGE60\"\nkubectl apply -f \"${NEW_HOSTNAME}-deployment.yaml\"\n\necho \"Resources applied successfully.PERCENTAGE80\"\n\n/data/depgenerator/newkubescript $BASE_HOSTNAME $3\n",
        "output": "str",
        "x": 1555,
        "y": 400,
        "wires": [
            [
                "c714f423f44e0967"
            ]
        ]
    },
    {
        "id": "bb26fe6d2cab1a2b",
        "type": "template",
        "z": "17fd25c6e3106653",
        "name": "newkubescript",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "#!/bin/bash\nexport KUBECONFIG=$2\nINGRESS_NAME=\"node-red-ingress\"\nNAMESPACE=\"default\"\nTLS_SECRET_NAME=\"leaneanew\"\n\n#echo \"Enter the hostname:\"\n#read NEW_HOSTNAME\nNEW_HOSTNAME=$1\nSERVICE_NAME=\"$(echo \"${NEW_HOSTNAME}\" | tr '[:upper:]' '[:lower:]' | tr '.' '-')\"\nSERVICE_PORT=\"1880\"\n\ncat > service.yaml <<- EOM\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/instance: $SERVICE_NAME\n    app.kubernetes.io/name: $SERVICE_NAME\n    app.kubernetes.io/version: 3.0.2\n  name: $SERVICE_NAME\nspec:\n  ports:\n  - name: http\n    port: $SERVICE_PORT\n    protocol: TCP\n    targetPort: $SERVICE_PORT\n  - name: filebrowser\n    port: 80\n    protocol: TCP\n    targetPort: 80\n  selector:\n    app.kubernetes.io/instance: $SERVICE_NAME\n    app.kubernetes.io/name: $SERVICE_NAME\n  sessionAffinity: None\n  type: ClusterIP\nEOM\n\nkubectl apply -f service.yaml\nrm service.yaml\n\n# Add ingress rule\nEXISTING_SERVICES=$(kubectl get ingress $INGRESS_NAME -n $NAMESPACE -o json | jq -r '.metadata.annotations.\"nginx.org/websocket-services\" // \"\"')\n\nif [[ $EXISTING_SERVICES == *\"$SERVICE_NAME\"* ]]; then\n  UPDATED_SERVICES=\"$EXISTING_SERVICES\"\nelse\n  UPDATED_SERVICES=\"$EXISTING_SERVICES,$SERVICE_NAME\"\nfi\n\ncat > add_host_patch.yaml <<- EOM\n- op: add\n  path: /spec/rules/-\n  value:\n    host: $NEW_HOSTNAME\n    http:\n      paths:\n      - backend:\n          service:\n            name: $SERVICE_NAME\n            port:\n              number: $SERVICE_PORT\n        path: /\n        pathType: Prefix\n      - backend:\n          service:\n            name: $SERVICE_NAME\n            port:\n              number: 80\n        path: /fscloud\n        pathType: Prefix\n- op: add\n  path: /spec/tls/-\n  value:\n    hosts:\n    - $NEW_HOSTNAME\n    secretName: $TLS_SECRET_NAME\nEOM\n\nkubectl patch ingress $INGRESS_NAME -n $NAMESPACE --type json --patch-file add_host_patch.yaml\nrm add_host_patch.yaml\n\ncat > update_annotation_patch.yaml <<- EOM\n- op: replace\n  path: /metadata/annotations/nginx.org~1websocket-services\n  value: ${UPDATED_SERVICES#,}\nEOM\necho \"Getting things ready...PERCENTAGE98\"\nkubectl patch ingress $INGRESS_NAME -n $NAMESPACE --type json --patch-file update_annotation_patch.yaml\n\necho \"PERCENTAGE100\"\nrm update_annotation_patch.yaml\n\n",
        "output": "str",
        "x": 1555,
        "y": 640,
        "wires": [
            [
                "32bb653726cc6c6c"
            ]
        ]
    },
    {
        "id": "a84409b6f41b1a03",
        "type": "template",
        "z": "17fd25c6e3106653",
        "name": "newkubescriptremover",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "#!/bin/bash\nexport KUBECONFIG=$2\nINGRESS_NAME=\"node-red-ingress\"\nNAMESPACE=\"default\"\n\n#echo \"Enter the hostname to remove:\"\n#read HOST_TO_REMOVE\nHOST_TO_REMOVE=$1\nSERVICE_TO_REMOVE=\"$(echo \"${HOST_TO_REMOVE}\" | tr '[:upper:]' '[:lower:]' | tr '.' '-')\"\n\n# Remove service\nkubectl delete service $SERVICE_TO_REMOVE -n $NAMESPACE\n\n# Remove ingress rule\nHOST_INDEX=$(kubectl get ingress $INGRESS_NAME -n $NAMESPACE -o json | jq -r --arg host \"$HOST_TO_REMOVE\" '.spec.rules | map(.host == $host) | index(true)')\nTLS_INDEX=$(kubectl get ingress $INGRESS_NAME -n $NAMESPACE -o json | jq -r --arg host \"$HOST_TO_REMOVE\" '.spec.tls | map(.hosts[0] == $host) | index(true)')\n\nEXISTING_SERVICES=$(kubectl get ingress $INGRESS_NAME -n $NAMESPACE -o json | jq -r '.metadata.annotations.\"nginx.org/websocket-services\" // \"\"')\nUPDATED_SERVICES=$(echo $EXISTING_SERVICES | sed \"s/\\b$SERVICE_TO_REMOVE\\b//g\" | sed \"s/,,/,/g\" | sed \"s/^,//\" | sed \"s/,\\$//\")\n\nif [ \"$HOST_INDEX\" != \"null\" ]; then\n  cat > remove_host_patch.yaml <<- EOM\n- op: remove\n  path: /spec/rules/$HOST_INDEX\nEOM\n\n  if [ \"$TLS_INDEX\" != \"null\" ]; then\n    echo \"- op: remove\" >> remove_host_patch.yaml\n    echo \"  path: /spec/tls/$TLS_INDEX\" >> remove_host_patch.yaml\n  fi\n\n  kubectl patch ingress $INGRESS_NAME -n $NAMESPACE --type json --patch-file remove_host_patch.yaml\n  rm remove_host_patch.yaml\nelse\n  echo \"Host not found.\"\nfi\n\nif [ \"$EXISTING_SERVICES\" != \"\" ]; then\n  cat > update_annotation_patch.yaml <<- EOM\n- op: replace\n  path: /metadata/annotations/nginx.org~1websocket-services\n  value: $UPDATED_SERVICES\nEOM\n\n  kubectl patch ingress $INGRESS_NAME -n $NAMESPACE --type json --patch-file update_annotation_patch.yaml\n  rm update_annotation_patch.yaml\nfi\n\n",
        "output": "str",
        "x": 1560,
        "y": 760,
        "wires": [
            [
                "e066109ce81c2358"
            ]
        ]
    },
    {
        "id": "c90ea3b708fdb1e1",
        "type": "file",
        "z": "17fd25c6e3106653",
        "name": "Write to Source",
        "filename": "address",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2215,
        "y": 580,
        "wires": [
            [
                "9153789107a27254"
            ]
        ]
    },
    {
        "id": "bf3e3cfbd2f0157f",
        "type": "function",
        "z": "17fd25c6e3106653",
        "name": "HTML",
        "func": "msg.address = \"/data/depgenerator/gendep\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1865,
        "y": 280,
        "wires": [
            [
                "c90ea3b708fdb1e1"
            ]
        ]
    },
    {
        "id": "c714f423f44e0967",
        "type": "function",
        "z": "17fd25c6e3106653",
        "name": "JS",
        "func": "msg.address = \"/data/depgenerator/gitdep\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1865,
        "y": 400,
        "wires": [
            [
                "c90ea3b708fdb1e1"
            ]
        ]
    },
    {
        "id": "32bb653726cc6c6c",
        "type": "function",
        "z": "17fd25c6e3106653",
        "name": "CSS",
        "func": "msg.address = \"/data/depgenerator/newkubescript\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1865,
        "y": 640,
        "wires": [
            [
                "c90ea3b708fdb1e1"
            ]
        ]
    },
    {
        "id": "e066109ce81c2358",
        "type": "function",
        "z": "17fd25c6e3106653",
        "name": "R1",
        "func": "msg.address = \"/data/depgenerator/newkubescriptremover\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1865,
        "y": 760,
        "wires": [
            [
                "c90ea3b708fdb1e1"
            ]
        ]
    },
    {
        "id": "104b957f57a90761",
        "type": "inject",
        "z": "17fd25c6e3106653",
        "name": "UIB ",
        "props": [
            {
                "p": "uib",
                "v": "mytestnew",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 340,
        "wires": [
            [
                "f7c98dd8fda951dd"
            ]
        ]
    },
    {
        "id": "fba6203e3503bdd3",
        "type": "exec",
        "z": "17fd25c6e3106653",
        "command": "echo $HOME",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Linux/K8s/Docker",
        "x": 215,
        "y": 520,
        "wires": [
            [
                "b132dc90cb832556"
            ],
            [],
            []
        ]
    },
    {
        "id": "b132dc90cb832556",
        "type": "function",
        "z": "17fd25c6e3106653",
        "name": "URL Builder",
        "func": "const os = msg.os || \"Unknown\";\nconst homeDir = msg.payload.trim().replace(/(\\r\\n|\\n|\\r)/gm, \"\");\nlet nodeRedUserDir;\nconst uib = msg.uib;\n\n\nif (os === \"K8S\") {\n    nodeRedUserDir = `/data`;\n} else if (os === \"Windows\") {\n    nodeRedUserDir = `${homeDir}\\\\.node-red`;\n} else {\n    nodeRedUserDir = `${homeDir}/.node-red`;\n}\n\nmsg= {\n    userDir: nodeRedUserDir,\n    uib: uib\n};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 655,
        "y": 500,
        "wires": [
            [
                "88499b36285a4c4a",
                "63d4fa05c4678e19",
                "bb26fe6d2cab1a2b",
                "a84409b6f41b1a03",
                "879979302898f8b4"
            ]
        ]
    },
    {
        "id": "ecf9ce83585b5d95",
        "type": "switch",
        "z": "17fd25c6e3106653",
        "name": "",
        "property": "os",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Linux",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "MacOS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Windows",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 995,
        "y": 320,
        "wires": [
            [
                "fba6203e3503bdd3"
            ],
            [
                "fba6203e3503bdd3"
            ],
            [
                "45d170d1605d5c1c"
            ],
            [
                "fba6203e3503bdd3"
            ]
        ]
    },
    {
        "id": "45d170d1605d5c1c",
        "type": "exec",
        "z": "17fd25c6e3106653",
        "command": "cmd.exe /C \"echo %USERPROFILE%\"",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Win32",
        "x": 215,
        "y": 660,
        "wires": [
            [
                "b132dc90cb832556"
            ],
            [],
            []
        ]
    },
    {
        "id": "f7c98dd8fda951dd",
        "type": "exec",
        "z": "17fd25c6e3106653",
        "command": "ver || uname -a && (test -d /var/run/secrets/kubernetes.io/serviceaccount && echo \"K8s\")",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Command Execution",
        "x": 395,
        "y": 340,
        "wires": [
            [
                "567be4607e0f9a1e"
            ],
            [],
            []
        ]
    },
    {
        "id": "567be4607e0f9a1e",
        "type": "function",
        "z": "17fd25c6e3106653",
        "name": "OS Recognition",
        "func": "const output = msg.payload.trim();\nconst isK8s = output.includes(\"K8s\");\nconst uib = msg.uib;\nlet osName;\nif (isK8s) {\n    osName = \"K8S\";\n}\nelse if (output.includes(\"Linux\")) {\n    osName = \"Linux\";\n} else if (output.includes(\"Darwin\")) {\n    osName = \"MacOS\";\n} else if (output.includes(\"Microsoft\") || output.includes(\"Windows\")) {\n    osName = \"Windows\";\n} else {\n    osName = \"Unknown\";\n}\n\nmsg = {\n    uib: uib,\n    os: osName,\n    raw: output\n};\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 695,
        "y": 320,
        "wires": [
            [
                "ecf9ce83585b5d95"
            ]
        ]
    },
    {
        "id": "879979302898f8b4",
        "type": "template",
        "z": "17fd25c6e3106653",
        "name": "newdepgeneratorremover",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "#!/bin/bash\nexport KUBECONFIG=$2\n#echo \"Please enter the new hostname:\"\n#read NEW_HOSTNAME\nNEW_HOSTNAME=$1\nBASE_HOSTNAME=$1\nNEW_HOSTNAME=\"$(echo \"${NEW_HOSTNAME}\" | tr '[:upper:]' '[:lower:]' | tr '.' '-')\"\nHOSTNAME=$NEW_HOSTNAME\n\necho \"Deleting deployment, rsync-data-pod, and PVC for ${HOSTNAME}...PERCENTAGE10\"\n\nkubectl delete deployment \"${HOSTNAME}\"\nkubectl delete pod \"rsync-data-pod\"\nkubectl delete pvc \"${HOSTNAME}\"\n\necho \"Deleted resources for ${HOSTNAME}.\"\n/data/depgenerator/newkubescriptremover $BASE_HOSTNAME $2",
        "output": "str",
        "x": 1560,
        "y": 520,
        "wires": [
            [
                "20b8c45f5916cb47"
            ]
        ]
    },
    {
        "id": "20b8c45f5916cb47",
        "type": "function",
        "z": "17fd25c6e3106653",
        "name": "VueProdJS",
        "func": "msg.address = \"/data/depgenerator/newdepgeneratorremover\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1865,
        "y": 520,
        "wires": [
            [
                "c90ea3b708fdb1e1"
            ]
        ]
    },
    {
        "id": "9153789107a27254",
        "type": "debug",
        "z": "17fd25c6e3106653",
        "name": "debug 71",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2610,
        "y": 420,
        "wires": []
    },
    {
        "id": "8b0ac600bba6dd5d",
        "type": "subflow:17fd25c6e3106653",
        "z": "8e459c9dee434a0a",
        "name": "",
        "x": 890,
        "y": 380,
        "wires": []
    }
]