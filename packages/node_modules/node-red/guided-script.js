function waitForElm(selector) {
    return new Promise(resolve => {
        if (document.querySelector(selector)) {
            return resolve(document.querySelector(selector));
        }

        const observer = new MutationObserver(mutations => {
            if (document.querySelector(selector)) {
                resolve(document.querySelector(selector));
                observer.disconnect();
            }
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
    });
}


waitForElm('.red-ui-deploy-button-content').then((elm) => {
    // console.log('Element is ready');
    var aTags = document.getElementsByTagName("span");
    var searchText = "Deploy";
    var found;
    for (var i = 0; i < aTags.length; i++) {
        if (aTags[i].textContent == searchText) {
            found = aTags[i];
            break;
        }
    }
    found.innerHTML = 'Save & Deploy';

    var deploy = document.getElementById("red-ui-header-button-deploy-icon");
    deploy.src = "/red/pic/deploy.svg";
});


waitForElm('.red-ui-palette-node').then((elm) => {
    const logo = document.getElementById('red-ui-header');
    logo.style.display = "inline";
    //document.querySelector(".red-ui-header-logo").firstChild.setAttribute("src","red/pic/logo.png")
});

waitForElm('.red-ui-flow-node').then((elm) => {
    function changeTab() {
        document.querySelectorAll("#red-ui-workspace-tabs .fa-eye").forEach(e => {
            e.classList.add("fa-close");
            e.classList.remove("fa-eye");
        })
    };
    changeTab();
    document.querySelector(".red-ui-tab-button.red-ui-tabs-add").firstChild.addEventListener('click', changeTab);
});




waitForElm('.red-ui-flow-node').then((elm) => {
    var title = document.createElement("h1");
    title.setAttribute('class', "active-flow-title");
    document.querySelector("#red-ui-header").insertBefore(title, document.querySelector("#red-ui-header").children[1]);
    title.innerHTML = document.querySelector(".red-ui-tab.red-ui-tabs-closeable.ui-draggable.ui-draggable-handle.active").getAttribute("flowname");
    window.onclick = function (event) {
        title.innerHTML = document.querySelector(".red-ui-tab.red-ui-tabs-closeable.ui-draggable.ui-draggable-handle.active").getAttribute("flowname");
    }
});




waitForElm('#red-ui-workspace-tabs').then((elm) => {
    var Button = document.createElement("a");
    Button.setAttribute('class', "flows-button");
    Button.innerText = "Flows";
    Button.addEventListener("click", showflows);
    document.querySelector(".red-ui-header-toolbar").appendChild(Button);


    var shade = document.createElement("div");
    shade.setAttribute('id', "shade");
    document.querySelector("#red-ui-editor").appendChild(shade);

    var flows = document.createElement("div");
    flows.setAttribute('id', "flows-container");
    document.querySelector("#red-ui-main-container").appendChild(flows);

    var search = document.createElement("input");
    search.setAttribute('id', "search-flows");
    search.setAttribute('type', "text");
    search.setAttribute('placeholder', "Search your flows...");
    flows.appendChild(search);

    var addFlow = document.createElement("button");
    addFlow.setAttribute('id', "add-flow");
    addFlow.setAttribute('type', "button");
    addFlow.addEventListener("click", function () {
        document.querySelector(".red-ui-tab-button.red-ui-tabs-add").firstChild.click()
    });
    flows.appendChild(addFlow);
    var addIcon = document.createElement("i");
    addIcon.setAttribute('class', "fa fa-plus");
    addFlow.appendChild(addIcon);


    const xmlhttp = new XMLHttpRequest();
    const currentURL = location.origin;
    xmlhttp.open("GET", currentURL + "/flows");
    xmlhttp.send();

    xmlhttp.onload = function () {
        const myObj = JSON.parse(this.responseText);

        const mySet = new Set();
        for (let i = 0; i < myObj.length; i++) {
            if (myObj[i].type == "tab" || myObj[i].type == "subflow") {

                const envObj = myObj[i].env;
                if (envObj.length === 0) {
                    myObj[i].category = "other";
                }
                for (let j = 0; j < envObj.length; j++) {
                    if (envObj[j].name == "category") {
                        myObj[i].category = envObj[j].value;
                        mySet.add(envObj[j].value);
                    }
                    else {
                        myObj[i].category = "other";
                    }
                }
            }
        }
        mySet.add("other");
        mySet.forEach(function (value) {
            var category = document.createElement("div");
            category.setAttribute('id', "category-" + value);
            category.setAttribute('class', "flow-category");
            flows.appendChild(category);
            var title = document.createElement("div");
            title.setAttribute('class', "category-title");
            title.innerText = value;
            category.appendChild(title);
        })


        for (let i = 0; i < myObj.length; i++) {
            if (myObj[i].type == "tab" || myObj[i].type == "subflow") {

                var flow = document.createElement("a");
                flow.setAttribute('class', "flow-container " + myObj[i].type);
                flow.setAttribute('href', "#" + myObj[i].id);
                flow.addEventListener('click', function (e) {
                    document.querySelectorAll(".red-ui-info-outline-item-label").forEach(e => {
                        if (e.innerText === myObj[i].name || e.innerText === myObj[i].label) {
                            if (myObj[i].type == "tab") {
                                e.parentElement.parentElement.firstChild.firstChild.click();
                            }
                            else
                                e.parentElement.parentElement.parentElement.firstChild.firstChild.click()
                        }
                    });
                    flows.scrollTop = 0;
                    flows.style.display = 'none';
                    document.getElementById("shade").style.display = "none";

                });
                document.querySelector("#category-" + myObj[i].category).appendChild(flow);

                var iconBox = document.createElement("div");
                flow.appendChild(iconBox);
                iconBox.setAttribute('class', "icon-container");
                var icon = document.createElement("img");
                iconBox.appendChild(icon);
                icon.setAttribute('class', "flow-icon");
                icon.setAttribute('src', "");

                var type = document.createElement("div");
                flow.appendChild(type);
                type.setAttribute('class', "flow-type");
                type.innerText = myObj[i].type;
                if (myObj[i].type == "tab") {
                    type.innerText = "flow";
                }
                var label = document.createElement("div");
                flow.appendChild(label);
                label.setAttribute('class', "flow-label");
                label.innerText = myObj[i].label || myObj[i].name;


            }
        }
    }

    search.addEventListener('keyup', function searchFunction() {
        var input, filter, flow, label, i, txtValue;
        input = document.getElementById("search-flows");
        filter = input.value.toUpperCase();
        flow = document.getElementsByClassName("flow-container");
        for (i = 0; i < flow.length; i++) {
            label = flow[i].getElementsByClassName("flow-label")[0];
            if (label) {
                txtValue = label.textContent || label.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    flow[i].style.display = "";
                    document.querySelectorAll(".flow-category").forEach(function (e) {
                        e.style.display = "";
                    })
                } else {
                    flow[i].style.display = "none";
                }
            }
        }
        document.querySelectorAll(".flow-category").forEach(function (e) {
            var children = e.childNodes;
            var hideParent = true;
            for (let i = 1; i < children.length; i++) {
                if (children[i].style.display != "none") {
                    hideParent = false;
                    break;
                }
            }
            if (hideParent) {
                e.style.display = "none";
            }
        })

    });

    function showflows() {
        document.getElementById("flows-container").style.display = "block";
        document.getElementById("shade").style.display = "block";
    }
    document.addEventListener('click', function hideflows(event) {
        if (!flows.contains(event.target) && !Button.contains(event.target)) {
            flows.scrollTop = 0;
            flows.style.display = 'none';
            shade.style.display = "none";
        }
    });
});





waitForElm('#red-ui-tab-debug-link-button').then((elm) => {
    var info = document.createElement("p");
    info.innerText = "Info";
    document.querySelector("#red-ui-tab-info-link-button").appendChild(info);
    var help = document.createElement("p");
    help.innerText = "Help";
    document.querySelector("#red-ui-tab-help-link-button").appendChild(help);
    var debug = document.createElement("p");
    debug.innerText = "Debug";
    document.querySelector("#red-ui-tab-debug-link-button").appendChild(debug);
    var config = document.createElement("p");
    config.innerText = "Config";
    document.querySelector("#red-ui-tab-config-link-button").appendChild(config);
    var context = document.createElement("p");
    context.innerText = "Context";
    document.querySelector("#red-ui-tab-context-link-button").appendChild(context);

    document.querySelectorAll(".red-ui-tab-link-button p").forEach(element => {
        element.className = "tabIcon";
    })


});


waitForElm('#red-ui-tab-editor-tab-properties-link-button').then((elm) => {

    propertiesButton = document.querySelector("#red-ui-tab-editor-tab-properties-link-button");
    if (propertiesButton != null) {
        var properties = document.createElement("p");
        properties.innerText = "Properties";
        propertiesButton.appendChild(properties);
    }
    subflowButton = document.querySelector("#red-ui-tab-editor-tab-subflow-module-link-button");
    if (subflowButton != null) {
        var subflow = document.createElement("p");
        subflow.innerText = "Subflow";
        subflowButton.appendChild(subflow);
    }
    descriptionButton = document.querySelector("#red-ui-tab-editor-tab-description-link-button");
    if (descriptionButton != null) {
        var description = document.createElement("p");
        description.innerText = "Description";
        descriptionButton.appendChild(description);
    }
    appearanceButton = document.querySelector("#red-ui-tab-editor-tab-appearance-link-button");
    if (appearanceButton != null) {
        var appearance = document.createElement("p");
        appearance.innerText = "Appearance";
        appearanceButton.appendChild(appearance);
    }

    document.querySelectorAll(".red-ui-tab-link-button p").forEach(element => {
        element.className = "tabIcon";
    })

});
